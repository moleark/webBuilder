/** 搜索帖文*/
QUERY SearchPost( 
    key char(100), 
    author ID [$user],
    businessScope ID BusinessScope,
    status smallint
)
PAGE (
    id bigint desc,
    caption char(100),
    discription char(200),
    image ID Image,
    author ID [$user],
    template ID Template,
	[$update] DATETIME,
	[$create] DATETIME,
    isValid tinyint,
    emphasis tinyint,
    language smallint,
	hits int,
	sumHits int,
    web     smallint,
    agent   smallint, 
    assist  smallint, 
    openweb smallint,
    bvweb smallint
) {
    var key2 char(102);
    set key2 = concat('%', key, '%');

    PAGE select p.id, p.caption, p.discription, p.image, p.author
            , p.template, p.[$update], p.[$create], p.isValid, p.emphasis, p.language
            , c.hits, c.sumHits
            , ifnull(ph.web, 0) as web
            , ifnull(ph.agent,0) as agent
            , ifnull( ph.assist,0) as assist
            , ifnull( ph.openweb ,0) as openweb
            , ifnull( ph.bvweb ,0) as bvweb
    from    POST as p
            join PostStatus as ps on ps.post = p.id
            left join PostPublish as ph on p.id = ph.post
			left join Hot as c on p.id=c.post
    where   p.id < $pageStart and p.isValid = 1 
            and ( p.template like key2 or p.discription like key2 or p.caption like key2 or key is null )
            and ( p.author = author or author = 0 )
            and p.businessScope = businessScope
            and ps.status = status
    order by p.id desc
    limit $pageSize;
};
 
/** 搜索已经发布了的文帖*/
QUERY SearchPostPublish( 
    key char(100),
    domain ID Domain,
    publish int,
    language smallint
)
PAGE (
    id bigint desc,
    post ID POST,
    caption char(100),
    discription char(200),
    image ID Image,
    author ID [$user],
    template ID Template,
    [$update] DATETIME,
	[$create] DATETIME,
    publishdate DATETIME,
    isValid tinyint,
    emphasis tinyint,
    language smallint,
	hits int,
	sumHits int
) {
    var key2 char(102);
    set key2 = concat('%', key, '%');

    /-mysql
    DROP TEMPORARY TABLE IF EXISTS `_$page_post`;
    CREATE TEMPORARY TABLE `_$page_post` (`id` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY, `post` BIGINT NOT NULL) ENGINE=MyISAM;
    insert  into `_$page_post`( post )
    select  p.`id` as `id`
    from    `tv_post` as p
            inner join `tv_postpublish` as ph on ph.post = p.id
    where   p.isValid = 1 and p.`language` = `_language`
            and (
                `_publish` = 0
                or (`_publish` = 1 and ph.web = 1)
                or (`_publish` = 2 and ph.agent = 1  )
                or (`_publish` = 3 and ph.assist = 1  )
                or (`_publish` = 4 and ph.openweb = 1  )
            )
            and (p.discription like `_key2_1` or p.caption like `_key2_1` or `_key2_1` is null)
            and (
                exists(select 1 from tv_postdomain as pd where pd.post = p.id and pd.domain = domain)
                or `_domain` = ''
            )
    order by ph.update desc;

    INSERT INTO `_$page`(`id`, `post`, `caption`, `discription`, `image`, `author`, `template`, `$update`, `$create`
        , `publishdate`, `isValid`, `emphasis`, `language`, `hits`, `sumHits`)
    select  pp.`id`, pp.`post`, p.`caption`, p.`discription`, p.`image`, p.`author`, p.`template`, p.`$update`, p.`$create`
        , ph.`update` as publishdate, p.`isValid`, p.`emphasis`, p.`language`, c.`hits`, c.`sumHits`
    from    `_$page_post` as pp
            inner join tv_post p on p.id = pp.post
            inner join tv_postpublish ph on ph.post = p.id
            left join tv_hot as c on c.post = p.id
    order by pp.id
    limit `_$pagesize`;
    -/
    /*
    PAGE select unix_timestamp(ph.update) as id,p.id as post, p.caption, p.discription, p.image, p.author, p.template
                , p.[$update], p.[$create], ph.update as publishdate
                , p.isValid, p.emphasis, p.language, c.hits, c.sumHits
    from    POST as p
            join PostPublish as ph on p.id = ph.post
            left join Hot as c on p.id=c.post
    where   unix_timestamp(ph.update) < $pageStart and p.isValid = 1 
            and p.language = language
            and (
                publish = 0
                or (publish = 1 and ph.web = 1  )
                or (publish = 2 and ph.agent = 1  )
                or (publish = 3 and ph.assist = 1  )
                or (publish = 4 and ph.openweb = 1  )
            )
            and ( p.discription like key2 or p.caption like key2 or key is null )
            and (
                exists( select 1 from PostDomain as pd where pd.post = p.id and pd.domain = domain )
                or domain = ''
            )
    order by unix_timestamp(ph.update) desc
    limit $pageSize;
    */
};


/** 搜索已经发布了的产品文帖*/
QUERY SearchPostPublishForProduct( 
    _post ID POST
)
returns ret  (
    product ID ProductX,
    post ID POST,
    operator ID [$user],
    update DATETIME
) {
    into ret select a.product, a.post, a.operator, a.update 
    from PostPublishProduct as a
    where a.post = _post;
};

/** 搜索贴文评价等级*/
QUERY SearchPostEvaluate( _post ID POST)
returns ret  (
    post ID POST,
    GradeA int,
    GradeB int,
    GradeC int,
    GradeD int,
    GradeE int,
) {
    into ret select a.post, a.GradeA, a.GradeB, a.GradeC , a.GradeD , a.GradeE 
    from PostEvaluate as a
    where a.post = _post;
};


/** 根据目录树搜索文帖 **/
QUERY SearchProductCategoryPost( 
    author ID [$user],
    productCategory ID ProductCategory,
    publish int 
)
PAGE (
    id bigint desc,
    post ID POST,
    caption char(100),
    discription char(200),
    image ID Image,
    author ID [$user],
    template ID Template,
	[$update] DATETIME,
	[$create] DATETIME,
    publishdate DATETIME,
    isValid tinyint,
    emphasis tinyint,
    language smallint,
	hits int,
	sumHits int,
    web     smallint,
    agent   smallint, 
    assist  smallint, 
    openweb smallint,
    bvweb   smallint
) {

    PAGE select unix_timestamp(ph.update) as id, p.id as post, p.caption, p.discription, p.image, p.author
            , p.template, p.[$update], p.[$create], ph.update as publishdate
            , p.isValid, p.emphasis, p.language, c.hits, c.sumHits
            , ifnull(ph.web, 0) as web
            , ifnull(ph.agent,0) as agent
            , ifnull( ph.assist,0) as assist
            , ifnull( ph.openweb ,0) as openweb
            , ifnull( ph.bvweb ,0) as bvweb
    from    POST as p
            join PostProductCatalog as pp on pp.post = p.id and pp.productCategory = productCategory
            left join PostPublish as ph on p.id = ph.post
			left join Hot as c on p.id=c.post
    where   p.id < $pageStart and p.isValid = 1
            and (
                publish = 0
                or (publish = 1 and ph.web = 1  )
                or (publish = 2 and ph.agent = 1  )
                or (publish = 3 and ph.assist = 1  )
                or (publish = 4 and ph.openweb = 1  )
            )
            and ( p.author = author or author = 0 )
    order by unix_timestamp(ph.update) desc
    limit $pageSize;
};

/** 根据目录树搜索文帖数量 **/
QUERY SearchProductCategoryPostCount( 
    productCategory ID ProductCategory
)
returns ret (
   postcounts int
) {
    into ret select count(*) as postcounts
    from    PostProductCatalog as ps
    where   ps.productCategory = productCategory;
};


/** 搜索栏目 **/
QUERY SearchSubject(
    _parent ID Subject
)
PAGE (
    id bigint desc,
    name char(100),
    counts int,
    child  int
) {
    PAGE select p.id, p.name, 
            ( select count(*) from PostSubject as a where a.subject = p.id) as counts,
            ( select count(*) from Subject as a where a.parent = p.id ) as child
    from   Subject as p
    where  p.id < $pageStart and p.isValid = 1 
           and p.parent = _parent
    order by p.id desc
    
    limit $pageSize;
};


/** 搜索栏目贴文 **/
QUERY SearchSubjectPost(    
    author ID [$user],
    subject ID Subject,
    publish int 
)
PAGE (
    id bigint desc,
    post ID POST,
    caption char(100),
    discription char(200),
    image ID Image,
    author ID [$user],
    template ID Template,
	[$update] DATETIME,
	[$create] DATETIME,
    publishdate DATETIME,
    isValid tinyint,
    emphasis tinyint,
    language smallint,
	hits int,
	sumHits int,
    web     smallint,
    agent   smallint, 
    assist  smallint, 
    openweb smallint,
    bvweb smallint
) {

    PAGE select unix_timestamp(ph.update) as id, p.id as post, p.caption, p.discription, p.image, p.author
            , p.template, p.[$update], p.[$create], ph.update as publishdate
            ,p.isValid, p.emphasis, p.language, c.hits, c.sumHits
            , ifnull(ph.web, 0) as web
            , ifnull(ph.agent,0) as agent
            , ifnull( ph.assist,0) as assist
            , ifnull( ph.openweb ,0) as openweb
            , ifnull( ph.bvweb ,0) as bvweb
    from    POST as p
            join PostSubject as pp on pp.post = p.id and pp.subject = subject
            left join PostPublish as ph on p.id = ph.post
			left join Hot as c on p.id=c.post
    where   p.id < $pageStart and p.isValid = 1 
            and (
                publish = 0
                or (publish = 1 and ph.web = 1  )
                or (publish = 2 and ph.agent = 1  )
                or (publish = 3 and ph.assist = 1  )
                or (publish = 4 and ph.openweb = 1  )
            )
            and ( p.author = author or author = 0 )
    order by unix_timestamp(ph.update)  desc
    limit $pageSize;
};


/** 搜索栏目 **/
QUERY SearchPostSubject(    
    _post ID POST
)
returns ret (
    subject ID Subject ,
    name char(100),
) {
    into ret select ps.subject, s.name
    from    PostSubject as ps
			left join Subject as s on ps.subject = s.id
    where   ps.post = _post;
};



/** 搜索目录节点 **/
QUERY SearchPostCatalog(    
    _post ID POST
)
returns ret (
    post ID POST,
    productCategory ID ProductCategory,
    name char(50)
) {
    into ret select ps.post, ps.productCategory, ps.name
    from    PostProductCatalog as ps
    where   ps.post = _post;
};

/** 搜索目录节点说明 **/
QUERY SearchPostCatalogExplain(    
    _post ID POST
)
returns ret (
    post ID POST,
    productCategory ID ProductCategory,
    name char(50)
) {
    into ret select ps.post, ps.productCategory, ps.name
    from    PostProductCatalogExplain as ps
    where   ps.post = _post;
};


/** 搜索研究领域 **/
QUERY SearchPostDomain(    
    _post ID POST
)
returns ret (
    post ID POST,
    domain ID Domain
) {
    into ret select ps.post, ps.domain
    from    PostDomain as ps
    where   ps.post = _post;
};

/** 根据目录树搜索文帖数量 **/
QUERY SearchDomainPostCount( 
    domain ID Domain
)
returns ret (
   postcounts int
) {
    into ret select count(*) as postcounts
    from    PostDomain as ps
    where   ps.domain = domain;
};

/** 搜索贴文产品 **/
QUERY SearchPostProduct( 
     _post ID POST
)
returns ret (
    post ID POST,
    product ID ProductX
) {
    into ret select ps.post, ps.product
    from    PostProduct as ps
    where   ps.post = _post;
};


/** 搜索栏目 **/
QUERY SearchDomainPost(    
    key char(100), 
    author ID [$user],
    domain ID Domain,
    publish int 
)
PAGE (
    id bigint desc,
    post ID POST,
    caption char(100),
    discription char(200),
    image ID Image,
    author ID [$user],
    template ID Template,
	[$update] DATETIME,
	[$create] DATETIME,
    publishdate DATETIME,
    isValid tinyint,
    emphasis tinyint,
    language smallint,
	hits int,
	sumHits int,
    web     smallint,
    agent   smallint, 
    assist  smallint, 
    openweb smallint,
    bvweb   smallint
) {

    var key2 char(102);
    set key2 = concat('%', key, '%');

    PAGE select  unix_timestamp(ph.update)  as id , p.id as post, p.caption, p.discription, p.image, p.author
            , p.template, p.[$update], p.[$create], ph.update as publishdate
            , p.isValid, p.emphasis, p.language, c.hits, c.sumHits
            , ifnull(ph.web, 0) as web
            , ifnull(ph.agent,0) as agent
            , ifnull( ph.assist,0) as assist
            , ifnull( ph.openweb ,0) as openweb
            , ifnull( ph.bvweb ,0) as bvweb
    from    POST as p
            join PostDomain as pp on pp.post = p.id 
            left join PostPublish as ph on p.id = ph.post
			left join Hot as c on p.id=c.post
    where   p.id < $pageStart and p.isValid = 1 
            and (p.caption like key2 or key is null )
            and (
                pp.domain = domain
                or pp.domain in( select dm.id from Domain as dm where dm.parent = domain )
            )
            and (
                publish = 0
                or (publish = 1 and ph.web = 1  )
                or (publish = 2 and ph.agent = 1  )
                or (publish = 3 and ph.assist = 1  )
                or (publish = 4 and ph.openweb = 1  )
            )
            and ( p.author = author or author = 0 )
    order by  unix_timestamp(ph.update)  desc
    limit $pageSize;
};




/** 搜索栏目 **/
QUERY SearchInformationPost()
PAGE (
    id bigint desc,
    post ID POST,
    caption char(100),
    discription char(200),
    image ID Image,
    author ID [$user],
	[$update] DATETIME,
	[$create] DATETIME,
    publishdate DATETIME,
    isValid tinyint,
    emphasis tinyint,
    language smallint,
    web     smallint,
    agent   smallint, 
    assist  smallint, 
    openweb smallint, 
    bvweb   smallint, 
    sort int
) {
 
    PAGE select pp.sort as id, p.id as post, p.caption, p.discription, p.image, p.author
            , p.[$update], p.[$create], ph.update as publishdate
            , p.isValid, p.emphasis, p.language
            , ifnull(ph.web, 0) as web
            , ifnull(ph.agent,0) as agent
            , ifnull( ph.assist,0) as assist
            , ifnull( ph.openweb ,0) as openweb
            , ifnull( ph.bvweb ,0) as bvweb
            , pp.sort
    from    POST as p
            join InformationPost as pp on pp.post = p.id 
            left join PostPublish as ph on p.id = ph.post
    where   p.id < $pageStart
    order by pp.sort
    limit $pageSize;
};


/** 搜索推荐产品 **/
QUERY SearchRecommendProduct(
    post ID POST
)
returns ret (
    id ID ProductX,
    no char(100),
    brand ID,
    origin char(100),
    description char(500),
    descriptionc char(500),
    imageurl char(100),
    chemical char(100),
    cas char(100),
    purity char(100),
    brandname char(100)
) {
    /-mysql

	INSERT  INTO `_ret` SELECT  p.id, p.no, p.brand, p.origin, p.description, p.descriptionc, p.imageurl, pc.chemical
         	,pc.cas, pc.purity, b.name AS brandname, p.id as `$id`
	FROM 	product.`tv_productcategoryleafcache` AS a
            INNER JOIN product.tv_productproductcategorycache as pp ON a.leaf = pp.category
            INNER JOIN product.tv_productx as p on p.id = pp.product
            LEFT JOIN  product.tv_brand as b on p.$unit = b.$unit and p.brand = b.id
            LEFT JOIN  ( 
				SELECT	a.product,  a.cas,  a.purity ,  a.$unit, a.chemical
				FROM    product.tv_productchemical AS a
				WHERE 	a.chemical = ( SELECT MAX( b.chemical ) FROM 	product.tv_productchemical AS b WHERE a.$unit = b.$unit AND a.product = b.product )
         ) AS pc on p.$unit = pc.$unit and p.id = pc.product
	WHERE 	pp.`$unit` = 24 AND pp.salesregion = 1
            AND (	
                a.parent in ( SELECT productcategory FROM webbuilder.tv_postproductcatalog where post = `_post`) or 
                a.leaf  in ( SELECT productcategory FROM webbuilder.tv_postproductcatalog where post = `_post` ) or
                not exists (SELECT productcategory FROM webbuilder.tv_postproductcatalog where post = `_post`   )
        	)
	LIMIT 10;
    -/
    /*
        CALL product.tv_GetProductCategoryLeafCache();
        call webbuilder.tv_searchrecommendproduct(0);
    */
};
 
QUERY SearchSubjectDefault(
    _businessScope ID BusinessScope
)
returns ret (
     subject ID Subject
){

    into ret select  subject
    from    SubjectDefault 
    where   businessScope = _businessScope;
};


QUERY getProdoctDescription(post ID Post) 
returns ret (
    product ID ProductX
) {
    into ret select a.product
    from    ProductDescriptionPost as a
    where   a.post = post;
};